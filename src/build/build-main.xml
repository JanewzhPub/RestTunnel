<?xml version="1.0" encoding="UTF-8"?>
<project name="build">

	<property file="build.local.properties" />
	<dirname property="project.base.dir" file="${ant.file.build}/../../" />
	<property name="build.dir" location="${project.base.dir}/build" />
	<property name="src.dir" location="${project.base.dir}/src" />
	<property name="src.build.dir" location="${src.dir}/build" />

	<property file="${src.build.dir}/build.branch.properties" />
	<property file="${src.build.dir}/build.external.properties" />
	<import file="${src.build.dir}/build-include.xml" />

	<property name="build.debug" value="yes" />
	<property name="build.api.war" value="api.war" />

	<target name="-init-ivy" depends="-ivy-load">
		<ivy-resolve file="${src.build.dir}/ivy.xml" />
	</target>

	<target name="escrow">
		<generate-escrow output-escrow-file="${build.dist.dir}/Escrow-Source.zip" passphrase-file="${build.dist.dir}/zip-file-password.txt">
			<escrow-src>
				<fileset dir="${project.base.dir}">
					<include name="src/**" />
					<include name="build/imports/**" />
				</fileset>
			</escrow-src>
		</generate-escrow>
	</target>
	<target name="publish" depends="-init-ivy">
		<ivy-deliver />
		<ivy-artifact-properties />
		<ivy-publish />
	</target>
	<target name="clean">
		<delete quiet="true">
			<fileset dir="${build.dir}">
				<include name="**/**" />
			</fileset>
		</delete>
	</target>
	<target name="-prepare-lib" depends="-init-ivy">
		<ivy-retrieve conf="compile, testing-tools" />
	</target>
	<target name="compile" depends="-prepare-lib">
		<mkdir dir="${build.java.class.dir}/common" />
		<mkdir dir="${build.java.class.dir}/server" />
		<mkdir dir="${build.java.class.dir}/client" />
		<javac srcdir="${src.dir}/common/java" destdir="${build.java.class.dir}/common" debug="${build.debug}">
			<classpath>
				<fileset dir="${build.downloaded.dir}/compile">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
		<javac srcdir="${src.dir}/server/java" destdir="${build.java.class.dir}/server" debug="${build.debug}">
			<classpath>
				<fileset dir="${build.downloaded.dir}/compile">
					<include name="**/*.jar" />
				</fileset>
				<pathelement location="${build.java.class.dir}/common" />
			</classpath>
		</javac>
		<javac srcdir="${src.dir}/client/java" destdir="${build.java.class.dir}/client" debug="${build.debug}">
			<classpath>
				<fileset dir="${build.downloaded.dir}/compile">
					<include name="**/*.jar" />
				</fileset>
				<pathelement location="${build.java.class.dir}/common" />
			</classpath>
		</javac>
	</target>
	<target name="jar" depends="compile">
		<mkdir dir="${build.tmp.dir}" />
		<jar destfile="${build.tmp.dir}/tunnel-server.jar">
			<fileset dir="${build.java.class.dir}/common" includes="**/*.class">
			</fileset>
			<fileset dir="${build.java.class.dir}/server" includes="**/*.class">
			</fileset>
		</jar>
		<jar destfile="${build.tmp.dir}/tunnel-client.jar">
			<fileset dir="${build.java.class.dir}/common" includes="**/*.class">
			</fileset>
			<fileset dir="${build.java.class.dir}/client" includes="**/*.class">
			</fileset>
		</jar>
	</target>
	<target name="client-main" depends="jar">
		<copy todir="${build.tmp.dir}">
			<fileset dir="${build.downloaded.dir}/compile">
				<include name="gson*.jar" />
				<include name="jetty*.jar" />
				<include name="websocket*.jar" />
				<include name="commons*.jar" />
			</fileset>
		</copy>
		<zip destfile="${build.dist.dir}/client-main.jar">
			<zipgroupfileset dir="${build.tmp.dir}" excludes="tunnel-server.jar">
			</zipgroupfileset>
		</zip>
	</target>
	<target name="package-war" depends="jar">
		<war warfile="${build.dist.dir}/${build.api.war}" webxml="${src.dir}/webapp/WEB-INF/web.xml">
			<classes dir="${src.dir}/webapp/WEB-INF/classes" />
			<mappedresources>
				<fileset dir="${build.downloaded.dir}/compile">
					<include name="gson*.jar" />
					<include name="commons*.jar" />
				</fileset>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*.jar" to="WEB-INF/lib/*.jar" />
				</chainedmapper>
			</mappedresources>
			<mappedresources>
				<fileset dir="${build.tmp.dir}" includes="tunnel-server.jar" />
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*.jar" to="WEB-INF/lib/*.jar" />
				</chainedmapper>
			</mappedresources>
		</war>
	</target>
	<available property="fglant.available" file="${build.dir}/fglant/foglight-ant.jar" />
	<target name="download-fglant" depends="-init-ivy" unless="${fglant.available}">
		<ivy-retrieve conf="build" />
		<unzip dest="${build.dir}/fglant" src="${build.downloaded.dir}/build/fglant.zip" />
	</target>
	<target name="-load-fglant" depends="download-fglant">
		<load-fglant />
	</target>
	<target name="dist" depends="-load-fglant, package-war, client-main">
		<copy todir="${build.dist.dir}">
			<fileset dir="${src.dir}/client">
				<include name="*.properties" />
				<include name="*.bat" />
				<include name="*.policy" />
				<include name="*.sh" />
			</fileset>
		</copy>
	</target>
</project>
